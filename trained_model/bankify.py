# -*- coding: utf-8 -*-
"""Bankify.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17BfDwRdI-hzoyV8YqO4JPTyHjP-7btiy
"""

import pandas as pd

data = pd.read_csv('/content/train_u6lujuX_CVtuZ9i (1).csv')

data.head()

data.tail()

data.shape

print("No.of rows",data.shape[0])
print("No. of columns",data.shape[1])

"""**Handling Missing Value**"""

data.info()

data.isnull()

data.isnull().sum()

data.isnull().sum()*100/len(data)

#dropping missing values which are less than 5% and filling missing values which are greater than 5% like credit_History

data = data.drop('Loan_ID',axis=1)

data.head(1)

columns = ['Gender','Dependents','LoanAmount','Loan_Amount_Term']

data = data.dropna(subset=columns)

data.isnull().sum()*100/len(data)

data['Self_Employed']= data['Self_Employed'].fillna(data['Self_Employed'].mode()[0])

data.isnull().sum()*100/len(data)

data['Credit_History'].unique()

data['Credit_History']= data['Credit_History'].fillna(data['Credit_History'].mode()[0])

data.isnull().sum()*100/len(data)

"""**Handling Categorical Values**"""

data.sample(5)

data.head()

data.tail()

#Replacing 3+ values of Dependents column to 4

data['Dependents']=data['Dependents'].replace(to_replace="3+",value="4")

data['Dependents'].unique()

data['Gender'].unique()

data.head()

#label encoding
data.replace({"Loan_Status":{'N':0,'Y':1}},inplace=True)

data.replace({'Married':{'No':0,'Yes':1},'Gender':{'Male':1,'Female':0}, 'Self_Employed':{'No':0,'Yes':1},'Property_Area':{'Rural':0,'Semiurban':1,'Urban':2},'Education':{'Graduate':1,'Not Graduate':0}},inplace=True)

data.head()

data.head()

data.tail()

X = data.drop('Loan_Status',axis=1)

X

Y = data['Loan_Status']

Y

"""**Feature Scaling**"""

cols=['ApplicantIncome','CoapplicantIncome','LoanAmount','Loan_Amount_Term']

from sklearn.preprocessing import StandardScaler
st = StandardScaler()
X[cols]=st.fit_transform(X[cols])

X

"""**Splitting dataset into traning set and training set and applying K-fold validation**"""

import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score

model_df = {}

def model_val(model, X, Y):
    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.20, random_state=42)
    model.fit(X_train, Y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(Y_test, y_pred)
    print(f"{model} accuracy is {accuracy}")
    score = cross_val_score(model, X, Y, cv=5)
    print(f"{model} Avg cross val score is {np.mean(score)}")
    model_df[str(model)] = round(np.mean(score) * 100, 2)

"""**Logistic Regression**"""

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model_val(model, X, Y)

model_df

"""**SVC**"""

from sklearn import svm
model = svm.SVC()
model_val(model,X,Y)

"""**Decision tree classifier**"""

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()
model_val(model,X,Y)

"""**Random Forest**"""

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
model_val(model,X,Y)

"""**Hyperparameter tuning**"""

from sklearn.model_selection import RandomizedSearchCV

log_reg_grid={"C":np.logspace(-4,4,20),
              "solver":['liblinear']}

rs_log_reg=RandomizedSearchCV(LogisticRegression(),param_distributions=log_reg_grid,n_iter=20,cv=5,verbose=True)

rs_log_reg.fit(X,Y)

rs_log_reg.best_score_

rs_log_reg.best_params_

"""**SVC**"""

svc_grid= {'C':[0.25,0.50,0.75,1],"kernel":['linear']}

rs_svc=RandomizedSearchCV(svm.SVC(),param_distributions=svc_grid,
                          n_iter=20,
                          cv=5,
                          verbose=True)

rs_svc.fit(X,Y)

rs_svc.best_score_

rs_svc.best_params_

"""Random Forest"""

RandomForestClassifier()

rf_grid = {'n_estimators':np.arange(10,1000,10),
 'max_features':['auto','sqrt'],
 'max_depth':[None,3,5,10,20,30],
 'min_samples_split':[2,5,20,50,100],
 'min_samples_leaf':[1,2,5,1]
 }

rs_rf= RandomizedSearchCV(RandomForestClassifier(),
                         param_distributions=rf_grid,
                         n_iter=20,
                          cv=5,
                          verbose=True)

rs_rf.fit(X,Y)

rs_rf.best_score_

rs_rf.best_params_

"""**Save Model**"""

X=data.drop('Loan_Status',axis=1)
Y=data['Loan_Status']

classifier = svm.SVC(kernel='linear',C= 0.25)
classifier.fit(X,Y)

import joblib

joblib.dump(classifier,"Loan_status_predict")

model= joblib.load('Loan_status_predict')

import pandas as pd
df = pd.DataFrame({
    'Gender':1,
    'Married':1,
    'Dependents':2,
    'Education':0,
    'Self_Employed':0,
    'ApplicantIncome':2889,
    'CoapplicantIncome':0.0,
    'LoanAmount':45,
    'Loan_Amount_Term':180,
    'Credit_History':1,
    'Property_Area':1
},index=[0])

df

result=model.predict(df)

if result==1:
  print("Loan Approved!!")
else:
  print("Loan Rejected!!")

